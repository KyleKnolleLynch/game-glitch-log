{"version":3,"sources":["context/ThemeContext.js","components/layout/Toggle.js","context/AuthContext.js","reducers/logReducer.js","context/LogContext.js","components/layout/Navbar.js","components/layout/LogDetails.js","components/pages/LogPage.js","components/pages/About.js","components/pages/PostForm.js","App.js","serviceWorker.js","index.js"],"names":["ThemeContext","createContext","ThemeContextProvider","props","useState","isLightTheme","setIsLightTheme","syntax","ui","bg","navLink","light","dark","Provider","value","toggleTheme","children","Toggle","useContext","theme","className","style","background","color","onClick","AuthContext","AuthContextProvider","isAuthenticated","setIsAuthenticated","toggleAuth","logReducer","state","action","type","game","log","title","author","details","id","uuid","filter","LogContext","LogContextProvider","useReducer","localData","localStorage","getItem","JSON","parse","logs","dispatch","useEffect","setItem","stringify","Navbar","to","href","length","LogDetails","LogPage","map","key","About","PostForm","setGame","setTitle","setAuthor","setDetails","paddingTop","onSubmit","e","preventDefault","history","push","onChange","target","required","htmlFor","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a5a793cf.chunk.js","sourcesContent":["import React, { useState, createContext } from 'react';\r\n\r\nexport const ThemeContext = createContext();\r\n\r\nconst ThemeContextProvider = props => {\r\n  const [isLightTheme, setIsLightTheme] = useState(false);\r\n  const [light] = useState({\r\n    syntax: '#0dafd8',\r\n    ui: '#ccc',\r\n    bg: '#f4f4f4',\r\n    navLink: '#fff'\r\n  });\r\n  const [dark] = useState({\r\n    syntax: '#0dafd8',\r\n    ui: '#222',\r\n    bg: '#333',\r\n    navLink: '#333'\r\n  });\r\n\r\n  const toggleTheme = () => {\r\n    setIsLightTheme(!isLightTheme);\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isLightTheme, dark, light, toggleTheme }}>\r\n      {props.children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ThemeContextProvider;\r\n","import React, { useContext } from 'react';\r\nimport { ThemeContext } from '../../context/ThemeContext';\r\n\r\nconst Toggle = () => {\r\n  const { isLightTheme, dark, light, toggleTheme } = useContext(ThemeContext);\r\n  const theme = isLightTheme ? light : dark;\r\n  return (\r\n    <button\r\n      className='toggle-btn btn ttu'\r\n      style={{ background: theme.ui, color: theme.syntax }}\r\n      onClick={toggleTheme}\r\n    >\r\n      <h6>\r\n        <em>go {isLightTheme ? 'dark' : 'light'} theme</em>\r\n      </h6>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Toggle;\r\n","import React, { useState, createContext } from 'react';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nconst AuthContextProvider = props => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  const toggleAuth = () => {\r\n    setIsAuthenticated(!isAuthenticated);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isAuthenticated, toggleAuth }}>\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContextProvider;\r\n","import uuid from 'uuid';\r\n\r\nexport const logReducer = (state, action) => {\r\n  switch(action.type) {\r\n    case 'ADD_LOG':\r\n      return [...state, {\r\n        game: action.log.game,\r\n        title: action.log.title,\r\n        author: action.log.author,\r\n        details: action.log.details,\r\n        id: uuid()\r\n      }]\r\n    case 'REMOVE_LOG':\r\n      return state.filter(log => log.id !== action.id)\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n","import React, { createContext, useReducer, useEffect } from 'react';\r\nimport { logReducer } from '../reducers/logReducer';\r\n\r\nexport const LogContext = createContext();\r\n\r\nconst LogContextProvider = props => {\r\n  const [logs, dispatch] = useReducer(logReducer, [], () => { \r\n  const  localData = localStorage.getItem('logs');\r\n  return localData ? JSON.parse(localData) : [];\r\n});\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('logs', JSON.stringify(logs))\r\n  }, [logs])\r\n\r\n  return (\r\n    <LogContext.Provider value={{ logs, dispatch }}>\r\n      {props.children}\r\n    </LogContext.Provider>\r\n  );\r\n};\r\n\r\nexport default LogContextProvider;\r\n","import React, { Fragment, useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Toggle from '../layout/Toggle';\r\nimport { ThemeContext } from '../../context/ThemeContext';\r\nimport { AuthContext } from '../../context/AuthContext';\r\nimport { LogContext } from '../../context/LogContext';\r\n\r\nconst Navbar = () => {\r\n  const { isLightTheme, dark, light } = useContext(ThemeContext);\r\n  const { isAuthenticated, toggleAuth } = useContext(AuthContext);\r\n  const { logs } = useContext(LogContext);\r\n  const theme = isLightTheme ? light : dark;\r\n  return (\r\n    <Fragment>\r\n      <nav style={{ background: theme.syntax, color: theme.navLink }}>\r\n        <ul>\r\n          <li>\r\n            <Link to='/'>\r\n              <strong>Home</strong>\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link to='/about'>\r\n              <strong>About</strong>\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link to='/postForm'>\r\n              <strong>Post</strong>\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n      <div\r\n        className='sub-nav center'\r\n        style={{ background: theme.ui, color: theme.syntax }}\r\n      >\r\n        <a href='#!' onClick={toggleAuth} className='auth-div ttc'>\r\n          {isAuthenticated ? 'signed in' : 'signed out'}\r\n        </a>\r\n        <div>\r\n          <h5>\r\n            {logs.length} {logs.length === 1 ? 'glitch' : 'glitches'} posted\r\n          </h5>\r\n        </div>\r\n        <Toggle />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { useContext } from 'react';\r\nimport { ThemeContext } from '../../context/ThemeContext';\r\nimport { LogContext } from '../../context/LogContext';\r\n\r\nconst LogDetails = ({ log }) => {\r\n  const { isLightTheme, dark, light } = useContext(ThemeContext);\r\n  const { dispatch } = useContext(LogContext);\r\n  const theme = isLightTheme ? light : dark;\r\n\r\n  return (\r\n    <div className='list-item log-details' style={{ background: theme.ui }}>\r\n      <h3>{log.game}</h3>\r\n      <h4 className='list-item'>{log.title}</h4>\r\n      <h5>posted by: {log.author}</h5>\r\n      <p className='list-item'>{log.details}</p>\r\n      <h6\r\n        className='delete-btn'\r\n        onClick={() => dispatch({ type: 'REMOVE_LOG', id: log.id })}\r\n      >{`{ Delete Post }`}</h6>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LogDetails;\r\n","import React, { useContext } from 'react';\r\nimport { ThemeContext } from '../../context/ThemeContext';\r\nimport { LogContext } from '../../context/LogContext';\r\nimport LogDetails from '../layout/LogDetails';\r\n\r\nconst LogPage = () => {\r\n  const { isLightTheme, dark, light } = useContext(ThemeContext);\r\n  const { logs } = useContext(LogContext);\r\n  const theme = isLightTheme ? light : dark;\r\n  return logs.length === 0 ? (\r\n    <div\r\n      className='container center empty-log'\r\n      style={{ background: theme.bg, color: theme.syntax }}\r\n    >\r\n      <h3>No entries posted! Please post a glitch.</h3>\r\n    </div>\r\n  ) : (\r\n    <div\r\n      className='log-page container center'\r\n      style={{ background: theme.bg, color: theme.syntax }}\r\n    >\r\n      <h1 className='banner-title ttc'>game glitch log</h1>\r\n      <div className='log-list'>\r\n        {logs.map(log => (\r\n          <LogDetails log={log} key={log.id} id={log.id} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LogPage;\r\n","import React, { useContext } from 'react';\r\nimport { ThemeContext } from '../../context/ThemeContext';\r\n\r\nconst About = () => {\r\n  const { isLightTheme, dark, light } = useContext(ThemeContext);\r\n  const theme = isLightTheme ? light : dark;\r\n\r\n  return (\r\n    <div\r\n      className='center container ttc'\r\n      style={{ background: theme.bg, color: theme.syntax }}\r\n    >\r\n      <h2>Game glitch / method log</h2>\r\n      <p className='list-item'>Version: 0.0.1</p>\r\n      <h3 className='list-item'>built with react and currently using local storage to save data.</h3>\r\n      <h5 className='list-item ttu'>No user authentification as of yet but plans are to implement that in the future, as well as using a database.</h5>\r\n      <p>&copy; Kyle Lynch 2019</p>\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React, { useContext, useState } from 'react';\r\nimport { LogContext } from '../../context/LogContext';\r\nimport { ThemeContext } from '../../context/ThemeContext';\r\n\r\nconst PostForm = props => {\r\n  const { dispatch } = useContext(LogContext);\r\n  const [game, setGame] = useState('');\r\n  const [title, setTitle] = useState('');\r\n  const [author, setAuthor] = useState('');\r\n  const [details, setDetails] = useState('');\r\n  const { isLightTheme, dark, light } = useContext(ThemeContext);\r\n  const theme = isLightTheme ? light : dark;\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    dispatch({\r\n      type: 'ADD_LOG',\r\n      log: {\r\n        game,\r\n        title,\r\n        author,\r\n        details\r\n      }\r\n    });\r\n    setGame('');\r\n    setTitle('');\r\n    setAuthor('');\r\n    setDetails('');\r\n    props.history.push('/');\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className='container'\r\n      style={{ background: theme.bg, color: theme.syntax, paddingTop: '3rem' }}\r\n    >\r\n      <form className='post-form ttc' onSubmit={handleSubmit}>\r\n        <h2 className='center'>post glitch or method</h2>\r\n        <div className='form-group my-1'>\r\n          <input\r\n            type='text'\r\n            id='game'\r\n            className='form-text'\r\n            value={game}\r\n            onChange={e => setGame(e.target.value)}\r\n            required\r\n          />\r\n          <label htmlFor='game'>game</label>\r\n        </div>\r\n        <div className='form-group my-1'>\r\n          <input\r\n            type='text'\r\n            id='title'\r\n            className='form-text'\r\n            value={title}\r\n            onChange={e => setTitle(e.target.value)}\r\n            required\r\n          />\r\n          <label htmlFor='title'>title</label>\r\n        </div>\r\n        <div className='form-group my-1'>\r\n          <input\r\n            type='text'\r\n            id='author'\r\n            className='form-text'\r\n            value={author}\r\n            onChange={e => setAuthor(e.target.value)}\r\n            required\r\n          />\r\n          <label htmlFor='author'>author</label>\r\n        </div>\r\n        <div className='form-group my-1'>\r\n          <textarea\r\n            type='text'\r\n            id='details'\r\n            className='form-text'\r\n            value={details}\r\n            onChange={e => setDetails(e.target.value)}\r\n            required\r\n          />\r\n          <label htmlFor='details'>details</label>\r\n        </div>\r\n        <button\r\n          className='btn'\r\n          style={{ background: theme.syntax, color: theme.bg }}\r\n        >\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n","import React, { Fragment } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Navbar from './components/layout/Navbar';\r\nimport LogPage from './components/pages/LogPage';\r\nimport About from './components/pages/About';\r\nimport PostForm from './components/pages/PostForm';\r\nimport ThemeContextProvider from './context/ThemeContext';\r\nimport AuthContextProvider from './context/AuthContext';\r\nimport LogContextProvider from './context/LogContext';\r\n\r\nimport './CSS/style.css';\r\n\r\nconst App = () => {\r\n  return (\r\n    <ThemeContextProvider>\r\n      <AuthContextProvider>\r\n        <LogContextProvider>\r\n          <Router>\r\n            <Fragment>\r\n              <Navbar />\r\n              <Switch>\r\n                <Route exact path='/' component={LogPage} />\r\n                <About exact path='/about' component={About} />\r\n                <Route exact path='/postForm' component={PostForm} />\r\n              </Switch>\r\n            </Fragment>\r\n          </Router>\r\n        </LogContextProvider>\r\n      </AuthContextProvider>\r\n    </ThemeContextProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.register();"],"sourceRoot":""}